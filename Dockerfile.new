# ===============================================================================
# Dockerfile para SymmetricDS en Render.com
# ===============================================================================
# DESCRIPCI√ìN: Dockerfile optimizado para desplegar SymmetricDS como servicio web
#              en Render.com con PostgreSQL en la nube
# ARQUITECTURA: Java 17 + SymmetricDS 3.16.5 + configuraci√≥n personalizada
# ===============================================================================

# Usar imagen base oficial de OpenJDK 17 (compatible con Render.com)
FROM openjdk:17-jdk-slim

# Metadatos del contenedor
LABEL maintainer="Sistema de Sincronizaci√≥n SymmetricDS"
LABEL version="3.16.5"
LABEL description="SymmetricDS Master Node para sincronizaci√≥n MySQL <-> PostgreSQL"

# Variables de entorno por defecto (se pueden sobrescribir en Render.com)
ENV JAVA_OPTS="-Xmx1024m -Xms512m -Djava.awt.headless=true"
ENV SYMMETRIC_HOME="/app"
ENV PORT=8080
ENV PG_PORT=5432

# Instalar dependencias del sistema necesarias
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    procps \
    net-tools \
    && rm -rf /var/lib/apt/lists/*

# Crear directorio de trabajo
WORKDIR /app

# Copiar TODOS los archivos de SymmetricDS
COPY . .

# Asegurar que los scripts tengan permisos de ejecuci√≥n
RUN chmod +x bin/* && \
    chmod +x config_sync/scripts/*.js 2>/dev/null || true

# Crear directorios necesarios si no existen
RUN mkdir -p logs tmp engines security

# Configurar zona horaria (ajustar seg√∫n regi√≥n)
ENV TZ=America/Argentina/Buenos_Aires
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Exponer el puerto para Render.com
EXPOSE $PORT

# Health check para que Render.com verifique que el servicio est√° funcionando
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
  CMD curl -f http://localhost:$PORT/sync/supabase-server || exit 1

# Crear script de entrada
RUN echo '#!/bin/bash' > /app/docker-entrypoint.sh && \
    echo 'set -e' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'echo "üöÄ Iniciando SymmetricDS Master Node..."' >> /app/docker-entrypoint.sh && \
    echo 'echo "üìÖ Fecha: $(date)"' >> /app/docker-entrypoint.sh && \
    echo 'echo "üîß Java Version: $(java -version 2>&1 | head -n1)"' >> /app/docker-entrypoint.sh && \
    echo 'echo "üíæ Memoria disponible: $(free -h | grep Mem | awk '"'"'{print $2}'"'"')"' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo '# Verificar variables cr√≠ticas' >> /app/docker-entrypoint.sh && \
    echo 'if [ -z "$PG_HOST" ] || [ -z "$PG_USER" ] || [ -z "$PG_PASS" ]; then' >> /app/docker-entrypoint.sh && \
    echo '    echo "‚ùå ERROR: Variables de entorno de PostgreSQL no configuradas"' >> /app/docker-entrypoint.sh && \
    echo '    echo "   Necesitas configurar: PG_HOST, PG_USER, PG_PASS, PG_DB"' >> /app/docker-entrypoint.sh && \
    echo '    exit 1' >> /app/docker-entrypoint.sh && \
    echo 'fi' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'echo "üåê Variables de entorno configuradas:"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - PG_HOST: $PG_HOST"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - PG_PORT: $PG_PORT"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - PG_DB: $PG_DB"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - PG_USER: $PG_USER"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - PORT: $PORT"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - RENDER_EXTERNAL_URL: $RENDER_EXTERNAL_URL"' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo '# Crear archivo de configuraci√≥n en la ubicaci√≥n correcta' >> /app/docker-entrypoint.sh && \
    echo 'CONFIG_FILE="/app/engines/render-server.properties"' >> /app/docker-entrypoint.sh && \
    echo 'echo "üîß Generando configuraci√≥n en $CONFIG_FILE..."' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    chmod +x /app/docker-entrypoint.sh

# Continuar construyendo el script de entrada
RUN echo 'cat > "$CONFIG_FILE" << '"'"'CONFIG_EOF'"'"'' >> /app/docker-entrypoint.sh && \
    echo 'engine.name=render-server' >> /app/docker-entrypoint.sh && \
    echo 'group.id=server' >> /app/docker-entrypoint.sh && \
    echo 'external.id=server-001' >> /app/docker-entrypoint.sh && \
    echo 'sync.url=${RENDER_EXTERNAL_URL}/sync/supabase-server' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'db.driver=org.postgresql.Driver' >> /app/docker-entrypoint.sh && \
    echo 'db.url=jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB}?sslmode=require&ssl=true&connectTimeout=30&socketTimeout=60' >> /app/docker-entrypoint.sh && \
    echo 'db.user=${PG_USER}' >> /app/docker-entrypoint.sh && \
    echo 'db.password=${PG_PASS}' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'db.pool.initial.size=2' >> /app/docker-entrypoint.sh && \
    echo 'db.pool.max.size=10' >> /app/docker-entrypoint.sh && \
    echo 'db.pool.min.idle=1' >> /app/docker-entrypoint.sh && \
    echo 'db.pool.max.idle=5' >> /app/docker-entrypoint.sh && \
    echo 'db.pool.max.wait=30000' >> /app/docker-entrypoint.sh && \
    echo 'db.pool.test.on.borrow=true' >> /app/docker-entrypoint.sh && \
    echo 'db.pool.test.while.idle=true' >> /app/docker-entrypoint.sh && \
    echo 'db.pool.validation.query=SELECT 1' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'auto.registration=false' >> /app/docker-entrypoint.sh && \
    echo 'start.route.job=true' >> /app/docker-entrypoint.sh && \
    echo 'start.outgoing.batches.job=true' >> /app/docker-entrypoint.sh && \
    echo 'start.incoming.batches.job=true' >> /app/docker-entrypoint.sh && \
    echo 'start.statistics.job=true' >> /app/docker-entrypoint.sh && \
    echo 'start.synctriggers.job=true' >> /app/docker-entrypoint.sh && \
    echo 'start.push.job=true' >> /app/docker-entrypoint.sh && \
    echo 'start.pull.job=true' >> /app/docker-entrypoint.sh && \
    echo 'start.heartbeat.job=true' >> /app/docker-entrypoint.sh && \
    echo 'start.purge.job=true' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'job.routing.period.time.ms=10000' >> /app/docker-entrypoint.sh && \
    echo 'job.outgoing.batches.period.time.ms=10000' >> /app/docker-entrypoint.sh && \
    echo 'job.incoming.batches.period.time.ms=10000' >> /app/docker-entrypoint.sh && \
    echo 'job.push.period.time.ms=15000' >> /app/docker-entrypoint.sh && \
    echo 'job.pull.period.time.ms=15000' >> /app/docker-entrypoint.sh && \
    echo 'job.heartbeat.period.time.ms=60000' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'web.enable=true' >> /app/docker-entrypoint.sh && \
    echo 'web.http.port=${PORT}' >> /app/docker-entrypoint.sh && \
    echo 'web.context.path=/sync' >> /app/docker-entrypoint.sh && \
    echo 'web.base.url=${RENDER_EXTERNAL_URL}' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'log.level=INFO' >> /app/docker-entrypoint.sh && \
    echo 'console.log.level=INFO' >> /app/docker-entrypoint.sh && \
    echo 'auto.config.database=true' >> /app/docker-entrypoint.sh && \
    echo 'auto.config.registration=true' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'cache.maximum.size=50000' >> /app/docker-entrypoint.sh && \
    echo 'initial.load.use.extract.job=true' >> /app/docker-entrypoint.sh && \
    echo 'jmx.agent.enable=true' >> /app/docker-entrypoint.sh && \
    echo 'jmx.agent.port=31416' >> /app/docker-entrypoint.sh && \
    echo 'CONFIG_EOF' >> /app/docker-entrypoint.sh

# Finalizar el script de entrada
RUN echo '' >> /app/docker-entrypoint.sh && \
    echo 'echo "‚úÖ Configuraci√≥n creada exitosamente"' >> /app/docker-entrypoint.sh && \
    echo 'echo "üîç Archivo: $CONFIG_FILE"' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo '# Verificar que el archivo existe' >> /app/docker-entrypoint.sh && \
    echo 'if [ ! -f "$CONFIG_FILE" ]; then' >> /app/docker-entrypoint.sh && \
    echo '    echo "‚ùå ERROR: No se pudo crear el archivo de configuraci√≥n"' >> /app/docker-entrypoint.sh && \
    echo '    exit 1' >> /app/docker-entrypoint.sh && \
    echo 'fi' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'echo "üîç Resumen de configuraci√≥n:"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - Base de datos: $PG_HOST:$PG_PORT/$PG_DB"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - Usuario DB: $PG_USER"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - Puerto web: $PORT"' >> /app/docker-entrypoint.sh && \
    echo 'echo "   - URL sync: $RENDER_EXTERNAL_URL/sync/supabase-server"' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo '# Configurar entorno' >> /app/docker-entrypoint.sh && \
    echo 'export SYMMETRIC_HOME="/app"' >> /app/docker-entrypoint.sh && \
    echo 'export SYM_HOME="/app"' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo '# Crear logs' >> /app/docker-entrypoint.sh && \
    echo 'mkdir -p logs' >> /app/docker-entrypoint.sh && \
    echo 'touch logs/symmetric.log' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo 'echo "üéØ Iniciando SymmetricDS en modo console..."' >> /app/docker-entrypoint.sh && \
    echo 'echo "‚è∞ Hora de inicio: $(date)"' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo '# Cambiar al directorio correcto' >> /app/docker-entrypoint.sh && \
    echo 'cd /app' >> /app/docker-entrypoint.sh && \
    echo '' >> /app/docker-entrypoint.sh && \
    echo '# Iniciar SymmetricDS' >> /app/docker-entrypoint.sh && \
    echo 'exec bin/sym_service render-server console' >> /app/docker-entrypoint.sh

# Comando por defecto
ENTRYPOINT ["/app/docker-entrypoint.sh"]

# ===============================================================================
# NOTAS PARA RENDER.COM:
# ===============================================================================
# 
# 1. VARIABLES DE ENTORNO OBLIGATORIAS EN RENDER.COM:
#    - PG_HOST: Host de PostgreSQL (ej: aws-0-us-east-2.pooler.supabase.com)
#    - PG_PORT: Puerto de PostgreSQL (default: 5432)
#    - PG_DB: Nombre de la base de datos (ej: postgres)
#    - PG_USER: Usuario de PostgreSQL (ej: postgres.swnwekychqqjmufqvkst)
#    - PG_PASS: Password de PostgreSQL
#
# 2. VARIABLES OPCIONALES:
#    - JAVA_OPTS: Opciones de JVM (default: -Xmx1024m -Xms512m)
#    - PORT: Puerto web (auto-configurado por Render.com)
#    - RENDER_EXTERNAL_URL: URL externa (auto-configurada por Render.com)
#
# 3. CONFIGURACI√ìN DEL SERVICIO EN RENDER.COM:
#    - Environment: Docker
#    - Build Command: [autom√°tico]
#    - Start Command: [autom√°tico - usa ENTRYPOINT]
#    - Health Check Path: /sync/supabase-server
#
# 4. DESPU√âS DEL DEPLOY:
#    - URL ser√°: https://tu-app.onrender.com
#    - Endpoint sync: https://tu-app.onrender.com/sync/supabase-server
#    - Ejecutar scripts SQL en PostgreSQL en el orden correcto
#
# ===============================================================================
